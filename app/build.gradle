/*
 * Copyright (C) 2018 Codepunk, LLC
 * Author(s): Scott Slater
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "com.android.application"

apply plugin: "androidx.navigation.safeargs"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'

import com.android.utils.Pair
import com.android.build.gradle.api.BaseVariant

android {
    compileSdkVersion rootProject.build_versions.target_sdk
    buildToolsVersion rootProject.build_versions.build_tools

    defaultConfig {
        applicationId "com.codepunk.core"
        minSdkVersion rootProject.build_versions.min_sdk
        targetSdkVersion rootProject.build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"

            ext.defaultRemoteEnvironment = "LOCAL"
            ext.loggingLevel = 1 // Essentially everything
            ext.logLevel = "VERBOSE"
        }

        release {
            minifyEnabled false

            // NOTE: This will likely cause moshi serialization issues. Fun.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.defaultRemoteEnvironment = "PRODUCTION"
            ext.loggingLevel = 4 // android.util.Log.INFO
            ext.logLevel = "INFO"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    dokka {
        outputFormat = 'html'
        outputDirectory = "${rootProject.buildDir}/javadoc"
        includeNonPublic = true
    }

    applicationVariants.all { variant ->
        /*
         * Generate a set of key/value pairs that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeStringConstantValues(
                variant,
                Pair.of(
                        "DEFAULT_REMOTE_ENVIRONMENT_VALUE",
                        variant.buildType.ext.defaultRemoteEnvironment
                ),
                Pair.of(
                        "AUTHENTICATOR_ACCOUNT_TYPE",
                        variant.applicationId
                )
        )

        /*
         * Define an additional BuildConfig int variable for the log level.
         */
        def logClass = "android.util.Log"
        variant.buildConfigField(
                "int",
                "LOG_LEVEL",
                "${logClass}.${variant.buildType.ext.logLevel}"
        )

        /*
         * Define an additional BuildConfig enum variable that is the value of
         * defaultRemoteEnvironment.
         */
        def environmentClass = "com.codepunk.core.data.remote.RemoteEnvironment"
        variant.buildConfigField(
                environmentClass,
                "DEFAULT_REMOTE_ENVIRONMENT",
                "${environmentClass}.valueOf(\"${variant.buildType.ext.defaultRemoteEnvironment}\")"
        )

        /*
         * Generate a set of preference keys that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makePreferenceKeys(
                variant,
                "ABOUT",
                "CURRENT_ACCOUNT_NAME",
                "DEVELOPER_OPTIONS_AUTHENTICATED_HASH",
                "DEVELOPER_OPTIONS_ENABLED",
                "DEVELOPER_OPTIONS_UNLOCKED",
                "LOG_OUT",
                "REMOTE_ENVIRONMENT"
        )

        /*
         * Generate a set of intent actions that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeIntentEntities(
                variant,
                IntentEntityType.ACTION,
                "AUTHENTICATION",
                "MAIN",
                "SETTINGS"
        )

        /*
         * Generate a set of intent categories that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeIntentEntities(
                variant,
                IntentEntityType.CATEGORY,
                "DEVELOPER",
                "LOG_IN",
                "MAIN",
                "REGISTER"
        )

        /*
         * Generate a set of intent categories that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeIntentEntities(
                variant,
                IntentEntityType.EXTRA,
                "AUTH_TOKEN_TYPE",
                "DEVELOPER_OPTIONS_PASSWORD_HASH",
                "USERNAME"
        )

        /*
         * Generate a set of unique bundle keys that are accessible as BuildConfig constants.
         */
        makeKeys(
                variant,
                "ACCOUNT",
                "DEVELOPER_OPTIONS_CLICKS_REMAINING",
                "FIRST_TIME",
                "INTENT",
                "LISTENER_SOURCE",
                "REQUEST_CODE",
                "USERNAME"
        )

        /*
         * Pull private values from gradle.properties
         * (See http://www.rainbowbreeze.it/environmental-variables-api-key-and-secret-buildconfig-and-android-studio/)
         * (Also see https://medium.com/@ericfu/securely-storing-secrets-in-an-android-application-501f030ae5a3
         *  for info about using KeyStore)
         */
        def codepunkLocalClientIdProp = project.hasProperty("CodepunkLocalClientIdProp") ?
                "\"${CodepunkLocalClientIdProp}\"" :
                "/**** Define Codepunk Local Client Id ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_LOCAL_CLIENT_ID", codepunkLocalClientIdProp)

        def codepunkLocalClientSecretProp = project.hasProperty("CodepunkLocalClientSecretProp") ?
                "\"${CodepunkLocalClientSecretProp}\"" :
                "/**** Define Codepunk Local Client Secret ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_LOCAL_CLIENT_SECRET", codepunkLocalClientSecretProp)

        def codepunkDevClientIdProp = project.hasProperty("CodepunkDevClientIdProp") ?
                "\"${CodepunkDevClientIdProp}\"" :
                "/**** Define Codepunk Dev Client Id ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_DEV_CLIENT_ID", codepunkDevClientIdProp)

        def codepunkDevClientSecretProp = project.hasProperty("CodepunkDevClientSecretProp") ?
                "\"${CodepunkDevClientSecretProp}\"" :
                "/**** Define Codepunk Dev Client Secret ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_DEV_CLIENT_SECRET", codepunkDevClientSecretProp)

        def codepunkProdClientIdProp = project.hasProperty("CodepunkProdClientIdProp") ?
                "\"${CodepunkProdClientIdProp}\"" :
                "/**** Define Codepunk Prod Client Id ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_PROD_CLIENT_ID", codepunkProdClientIdProp)

        def codepunkProdClientSecretProp = project.hasProperty("CodepunkProdClientSecretProp") ?
                "\"${CodepunkProdClientSecretProp}\"" :
                "/**** Define Codepunk Prod Client Secret ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_PROD_CLIENT_SECRET", codepunkProdClientSecretProp)

        def developerOptionsPasswordHash = project.hasProperty("DeveloperOptionsPasswordHash") ?
                "\"${DeveloperOptionsPasswordHash}\"" :
                "/**** Define Developer Password Hash ****/ \"\""
        variant.buildConfigField("String", "DEVELOPER_OPTIONS_PASSWORD_HASH", developerOptionsPasswordHash)
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "android.arch.lifecycle:extensions:${rootProject.versions.lifecycle}"
    implementation "android.arch.lifecycle:common-java8:${rootProject.versions.lifecycle}"
    implementation "android.arch.lifecycle:runtime:${rootProject.versions.lifecycle}"
    implementation "android.arch.persistence.room:runtime:${rootProject.versions.room}"
    implementation "android.arch.navigation:navigation-fragment-ktx:${rootProject.versions.navigation}"
    implementation "android.arch.navigation:navigation-ui-ktx:${rootProject.versions.navigation}"
    implementation "androidx.appcompat:appcompat:${rootProject.versions.androidx_appcompat}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.versions.androidx_constraint}"
    implementation "androidx.preference:preference:${rootProject.versions.androidx_legacy}"
    implementation "androidx.multidex:multidex:${rootProject.versions.multidex}"
    /* TODO Fabric/Crashlytics
    implementation ("com.crashlytics.sdk.android:crashlytics:${rootProject.versions.crashlytics}") {
        transitive = true
    }
    */
    implementation "com.google.dagger:dagger:${rootProject.versions.dagger}"
    implementation "com.google.dagger:dagger-android:${rootProject.versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${rootProject.versions.dagger}"
    /* TODO Maybe not needed
    implementation "com.squareup.moshi:moshi-kotlin:${rootProject.version.moshi_kotlin}"
    */
    implementation "com.squareup.retrofit2:retrofit:${rootProject.versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${rootProject.versions.retrofit}"
    implementation "commons-codec:commons-codec:${rootProject.versions.apache_codec}"
    /* TODO Fabric/Crashlytics
    implementation "io.fabric.tools:gradle:${rootProject.versions.fabric}"
    */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${rootProject.versions.kotlin}"

    implementation project(':doofenschmirtz')
    implementation project(':punkubator')

    // See https://stackoverflow.com/questions/44989650/dagger2-cannot-access-nullable-javax-annotation-nullable-not-found
    // for why this is being included
    implementation "com.google.code.findbugs:jsr305:${rootProject.versions.findbugs}"

    kapt "android.arch.lifecycle:compiler:${rootProject.versions.lifecycle}"
    kapt "android.arch.persistence.room:compiler:${rootProject.versions.room}"
    kapt "com.google.dagger:dagger-android-processor:${rootProject.versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${rootProject.versions.dagger}"

    testImplementation "junit:junit:${rootProject.versions.junit}"

    androidTestImplementation "android.arch.navigation:navigation-testing-ktx:${rootProject.versions.navigation_testing}"
    androidTestImplementation "android.arch.persistence.room:testing:${rootProject.versions.room}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${rootProject.versions.test_espresso_core}"
    androidTestImplementation "com.android.support.test:runner:${rootProject.versions.test_runner}"
}

// region Methods

static def makeIntConstantValues(BaseVariant variant, Pair<String, Integer>... pairs) {
    pairs.each { pair ->
        def buildConfigValue = "${pair.second}"
        variant.buildConfigField("int", pair.first, buildConfigValue)

        def resourceName = pair.first.toLowerCase(Locale.US)
        variant.resValue("integer", resourceName, pair.second.toString())
    }
}

static def makeStringConstantValues(BaseVariant variant, Pair<String, String>... pairs) {
    pairs.each { pair ->
        def buildConfigValue = "\"${pair.second}\""
        variant.buildConfigField("String", pair.first, buildConfigValue)

        def resourceName = pair.first.toLowerCase(Locale.US)
        variant.resValue("string", resourceName, pair.second)
    }
}

static def makeKeys(BaseVariant variant, String... keys) {
    keys.each { key ->
        def buildConfigName = "KEY_$key"
        def buildConfigValue = "\"${variant.applicationId}.$key\""
        variant.buildConfigField("String", buildConfigName, buildConfigValue)
    }
}

static def makePreferenceKeys(BaseVariant variant, String... keys) {
    keys.each { key ->
        def fullKey = "PREF_KEY_$key"
        def buildConfigValue = "\"${variant.applicationId}.$fullKey\""
        variant.buildConfigField("String", fullKey, buildConfigValue)

        def resourceName = fullKey.toLowerCase(Locale.US)
        def resourceValue = "${variant.applicationId}.$fullKey"
        variant.resValue("string", resourceName, resourceValue)
    }
}

def enum IntentEntityType {
    ACTION,
    CATEGORY,
    EXTRA
}

static def makeIntentEntities(BaseVariant variant, IntentEntityType type, String... names) {
    names.each { name ->
        def lowerType = type.toString().toLowerCase(Locale.US)
        def buildConfigName = "${type.toString()}_$name"
        def buildConfigValue = "\"${variant.applicationId}.intent.$lowerType.$name\""
        variant.buildConfigField("String", buildConfigName, buildConfigValue)

        def resourceName = "intent_${lowerType}_${name.toLowerCase(Locale.US)}"
        def resourceValue = "${variant.applicationId}.intent.$lowerType.$name"
        variant.resValue("string", resourceName, resourceValue)
    }
}

// endregion Methods
