/*
 * Copyright (C) 2018 Codepunk, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'

import com.android.build.gradle.api.BaseVariant

android {
    compileSdkVersion rootProject.build_versions.target_sdk
    buildToolsVersion rootProject.build_versions.build_tools

    defaultConfig {
        applicationId "com.codepunk.core"
        minSdkVersion rootProject.build_versions.min_sdk
        targetSdkVersion rootProject.build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"

            ext.defaultRemoteEnvironment = "LOCAL"

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' // TODO This will likely cause moshi serialization issues. Fun.

            ext.defaultRemoteEnvironment = "PRODUCTION"
        }
    }

    applicationVariants.all { variant ->
        /*
         * Generate a set of key/value pairs that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeConstantValues(
                variant,
                "DEFAULT_REMOTE_ENVIRONMENT_VALUE", variant.buildType.ext.defaultRemoteEnvironment,
                "AUTHENTICATOR_ACCOUNT_TYPE", variant.applicationId
        )

        /*
         * Define an additional BuildConfig enum variable that is the value of
         * defaultRemoteEnvironment.
         */
        def environmentClass = "com.codepunk.core.data.remote.RemoteEnvironment"
        variant.buildConfigField(
                environmentClass,
                "DEFAULT_REMOTE_ENVIRONMENT",
                "${environmentClass}.valueOf(\"${variant.buildType.ext.defaultRemoteEnvironment}\")"
        )

        /*
         * Generate a set of preference keys that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makePreferenceKeys(
                variant,
                "ABOUT",
                "CURRENT_ACCOUNT_NAME",
                "DEVELOPER_OPTIONS_AUTHENTICATED_HASH",
                "DEVELOPER_OPTIONS_ENABLED",
                "DEVELOPER_OPTIONS_UNLOCKED",
                "LOG_OUT",
                "REMOTE_ENVIRONMENT"
        )

        /*
         * Generate a set of intent actions that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeIntentActions(
                variant,
                "AUTHORIZATION",
                "MAIN",
                "SETTINGS"
        )

        /*
         * Generate a set of intent categories that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeIntentCategories(
                variant,
                "CREATE_ACCOUNT",
                "DEVELOPER",
                "LOG_IN",
                "MAIN"
        )

        /*
         * Generate a set of intent categories that are accessible both as string resources
         * and as BuildConfig constants.
         */
        makeIntentExtras(
                variant,
                "AUTH_TOKEN_TYPE",
                "DEVELOPER_OPTIONS_PASSWORD_HASH",
                "USERNAME"
        )

        /*
         * Generate a set of unique bundle keys that are accessible as BuildConfig constants.
         */
        makeKeys(
                variant,
                "ACCOUNT",
                "DEVELOPER_OPTIONS_CLICKS_REMAINING",
                "FIRST_TIME",
                "PENDING_INTENT"
        )

        /*
         * Pull private values from gradle.properties
         * (See http://www.rainbowbreeze.it/environmental-variables-api-key-and-secret-buildconfig-and-android-studio/)
         * (Also see https://medium.com/@ericfu/securely-storing-secrets-in-an-android-application-501f030ae5a3
         *  for info about using KeyStore)
         */
        def codepunkLocalClientIdProp = project.hasProperty("CodepunkLocalClientIdProp") ?
                "\"${CodepunkLocalClientIdProp}\"" :
                "/**** Define Codepunk Local Client Id ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_LOCAL_CLIENT_ID", codepunkLocalClientIdProp)

        def codepunkLocalClientSecretProp = project.hasProperty("CodepunkLocalClientSecretProp") ?
                "\"${CodepunkLocalClientSecretProp}\"" :
                "/**** Define Codepunk Local Client Secret ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_LOCAL_CLIENT_SECRET", codepunkLocalClientSecretProp)

        def codepunkDevClientIdProp = project.hasProperty("CodepunkDevClientIdProp") ?
                "\"${CodepunkDevClientIdProp}\"" :
                "/**** Define Codepunk Dev Client Id ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_DEV_CLIENT_ID", codepunkDevClientIdProp)

        def codepunkDevClientSecretProp = project.hasProperty("CodepunkDevClientSecretProp") ?
                "\"${CodepunkDevClientSecretProp}\"" :
                "/**** Define Codepunk Dev Client Secret ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_DEV_CLIENT_SECRET", codepunkDevClientSecretProp)

        def codepunkProdClientIdProp = project.hasProperty("CodepunkProdClientIdProp") ?
                "\"${CodepunkProdClientIdProp}\"" :
                "/**** Define Codepunk Prod Client Id ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_PROD_CLIENT_ID", codepunkProdClientIdProp)

        def codepunkProdClientSecretProp = project.hasProperty("CodepunkProdClientSecretProp") ?
                "\"${CodepunkProdClientSecretProp}\"" :
                "/**** Define Codepunk Prod Client Secret ****/ \"\""
        variant.buildConfigField("String", "CODEPUNK_PROD_CLIENT_SECRET", codepunkProdClientSecretProp)

        def developerOptionsPasswordHash = project.hasProperty("DeveloperOptionsPasswordHash") ?
                "\"${DeveloperOptionsPasswordHash}\"" :
                "/**** Define Developer Password Hash ****/ \"\""
        variant.buildConfigField("String", "DEVELOPER_OPTIONS_PASSWORD_HASH", developerOptionsPasswordHash)
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
        includeNonPublic = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.deps.android.animated_vector_drawable
    implementation rootProject.deps.androidx.app_compat
    implementation rootProject.deps.androidx.constraint_layout
    implementation rootProject.deps.androidx.legacy
    implementation rootProject.deps.androidx.preference
    implementation rootProject.deps.apache.codec
    implementation rootProject.deps.dagger.dagger
    implementation rootProject.deps.dagger.android
    implementation rootProject.deps.dagger.android_support
    implementation rootProject.deps.kotlin.stdlib
    implementation rootProject.deps.lifecycle.extensions
    implementation rootProject.deps.lifecycle.java8
    implementation rootProject.deps.navigation.fragment_ktx
    implementation rootProject.deps.navigation.ui_ktx
    implementation rootProject.deps.retrofit.runtime
    implementation rootProject.deps.retrofit.moshi
    // implementation rootProject.deps.retrofit.moshi_kotlin TODO Maybe not needed

    implementation project(':doofenschmirtz')

    // See https://stackoverflow.com/questions/44989650/dagger2-cannot-access-nullable-javax-annotation-nullable-not-found
    // for why this is being included
    implementation rootProject.deps.findbugs

    kapt rootProject.deps.dagger.android_support_compiler
    kapt rootProject.deps.dagger.compiler
    kapt rootProject.deps.kotlin.compiler

    testImplementation rootProject.deps.junit

    androidTestImplementation rootProject.deps.atsl.runner
    androidTestImplementation rootProject.deps.espresso.core
    androidTestImplementation rootProject.deps.lifecycle.testing
}

// region Methods

static def makeConstantValues(BaseVariant variant, String... values) {
    0.step(values.length, 2) { i ->
        if (i + 1 < values.length) {
            def buildConfigValue = "\"${values[i + 1]}\""
            variant.buildConfigField("String", values[i], buildConfigValue)

            def resourceName = values[i].toLowerCase(Locale.US)
            variant.resValue("string", resourceName, values[i + 1])
        }
    }
}

static def makeKeys(BaseVariant variant, String... keys) {
    keys.each { key ->
        def buildConfigName = "KEY_$key"
        def buildConfigValue = "\"${variant.applicationId}.$key\""
        variant.buildConfigField("String", buildConfigName, buildConfigValue)
    }
}

static def makePreferenceKeys(BaseVariant variant, String... keys) {
    keys.each { key ->
        def full_key = "PREF_KEY_$key"
        def buildConfigValue = "\"${variant.applicationId}.$full_key\""
        variant.buildConfigField("String", full_key, buildConfigValue)

        def resourceName = full_key.toLowerCase(Locale.US)
        def resourceValue = "${variant.applicationId}.$full_key"
        variant.resValue("string", resourceName, resourceValue)
    }
}

static def makeIntentEntities(BaseVariant variant, String type, String... names) {
    names.each { name ->
        def lowerType = type.toLowerCase(Locale.US)
        def buildConfigName = "${type}_$name"
        def buildConfigValue = "\"${variant.applicationId}.intent.$lowerType.$name\""
        variant.buildConfigField("String", buildConfigName, buildConfigValue)

        def resourceName = "intent_${lowerType}_${name.toLowerCase(Locale.US)}"
        def resourceValue = "${variant.applicationId}.intent.$lowerType.$name"
        variant.resValue("string", resourceName, resourceValue)
    }
}

static def makeIntentActions(BaseVariant variant, String... names) {
    makeIntentEntities(variant, "ACTION", names)
}

static def makeIntentCategories(BaseVariant variant, String... names) {
    makeIntentEntities(variant, "CATEGORY", names)
}

static def makeIntentExtras(BaseVariant variant, String... names) {
    makeIntentEntities(variant, "EXTRA", names)
}

// endregion Methods
